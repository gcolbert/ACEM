<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
    xmlns="http://www.springframework.org/schema/security"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- HTTP security configurations -->
    <http entry-point-ref="casEntryPoint" use-expressions="true" auto-config="true">
		<!-- For Spring Security 4.x, we need to disable csrf, otherwise AJAX requests get 403:-->
		<csrf disabled="true"/>
		<intercept-url access="permitAll" pattern="/" /><!-- To permit "/" allows the use of web.xml's <welcome-file> -->
		<intercept-url access="permitAll" pattern="/home" />
		<intercept-url access="permitAll" pattern="/pages/exceptions/**" />
		<intercept-url access="permitAll" pattern="/javax.faces.resource/**" />
		<intercept-url access="permitAll" pattern="/resources/**" />
		<intercept-url access="hasRole('ROLE_ADMIN')" pattern="/administration/**" />
		<intercept-url access="hasRole('ROLE_ADMIN')" pattern="/rest/**" />
        <intercept-url access="isAuthenticated()" pattern="/**"/><!-- When the user is authentificated by CAS, but doesn't exist in the application database -->
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER" />
        <form-login login-page="/login-page-should-not-be-generated-when-using-cas" />
        <logout logout-url="/logout" logout-success-url="/home"/>
    </http>

    <!-- Configure Authentication mechanism -->
	<authentication-manager alias="authenticationManager">
	  <authentication-provider ref="authProvider"/>
	</authentication-manager>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <b:constructor-arg value="${cas.server.host}/logout"/>
        <b:constructor-arg>
            <b:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </b:constructor-arg>
        <b:property name="filterProcessesUrl" value="/logout"/>
    </b:bean>

    <b:bean id="serviceProperties"
        class="org.springframework.security.cas.ServiceProperties"
        p:service="${cas.service.host}/login/cas"
        p:authenticateAllArtifacts="true"/>
    <b:bean id="casEntryPoint"
        class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties"
        p:loginUrl="${cas.server.host}/login" />
    <b:bean id="casFilter"
        class="org.springframework.security.cas.web.CasAuthenticationFilter"
        p:authenticationManager-ref="authenticationManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage"
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <b:property name="authenticationDetailsSource">
            <b:bean class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource">
            	<b:constructor-arg ref="serviceProperties"/>
            </b:bean>
        </b:property>
        <b:property name="authenticationFailureHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/casfailed.jsp"/>
        </b:property>
		<b:property name="authenticationSuccessHandler">
			<b:bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler"
				p:defaultTargetUrl="/" p:alwaysUseDefaultTargetUrl="true" />
		</b:property>
    </b:bean>
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <b:bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>

    <b:bean id="authProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="authProviderKey">
        <b:property name="authenticationUserDetailsService">
            <b:bean class="eu.ueb.acem.services.auth.DatabaseUserDetailsService"/>
        </b:property>
        <b:property name="ticketValidator">
            <b:bean
                class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                p:acceptAnyProxy="true"
                p:proxyCallbackUrl="${cas.service.host}/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <b:constructor-arg value="${cas.server.host}" />
            </b:bean>
        </b:property>
        <b:property name="statelessTicketCache">
            <b:bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <b:property name="cache">
                    <b:bean class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <b:constructor-arg value="casTickets"/>
                        <b:constructor-arg value="50"/>
                        <b:constructor-arg value="true"/>
                        <b:constructor-arg value="false"/>
                        <b:constructor-arg value="3600"/>
                        <b:constructor-arg value="900"/>
                        <b:property name="cacheManager" ref="cacheManager"/>
                    </b:bean>
                </b:property>
            </b:bean>
        </b:property>
    </b:bean>

</b:beans>
