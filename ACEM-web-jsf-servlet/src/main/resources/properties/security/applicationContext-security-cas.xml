<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

    Licensed to ESUP-Portail under one or more contributor license
    agreements. See the NOTICE file distributed with this work for
    additional information regarding copyright ownership.

    ESUP-Portail licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in
    compliance with the License. You may obtain a copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
    xmlns="http://www.springframework.org/schema/security"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- HTTP security configurations -->
    <http entry-point-ref="casEntryPoint" use-expressions="true">
		<intercept-url pattern="/home" access="permitAll"/>
		<intercept-url pattern="/login" access="permitAll"/>
		<intercept-url pattern="/administration*" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/pages/exceptions/**" access="permitAll"/>
        <intercept-url pattern="/javax.faces.resource/**" access="permitAll"/>
        <intercept-url pattern="/resources/**" access="permitAll"/>
        <intercept-url pattern="/templates/**" access="permitAll"/>
        <!-- 
        When the user is authentificated by CAS, but doesn't exist in the application database
        <intercept-url access="isAuthenticated()" pattern="/**"/>
        -->
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER" />
        <logout logout-success-url="/pages/logout.xhtml"/>
        <session-management invalid-session-url="/pages/timeout.xhtml">  
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />  
        </session-management> 
    </http>

    <!-- Configure Authentication mechanism -->
	<authentication-manager alias="authenticationManager">
	  <authentication-provider ref="${authentication.provider}"/>
	</authentication-manager>
	
    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <b:constructor-arg value="${cas.server.host}/logout"/>
        <b:constructor-arg>
            <b:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </b:constructor-arg>
    </b:bean>

    <b:bean id="serviceProperties"
        class="org.springframework.security.cas.ServiceProperties"
        p:service="${cas.service.host}/j_spring_cas_security_check"
        p:authenticateAllArtifacts="true"/>
    <b:bean id="casEntryPoint"
        class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties" p:loginUrl="${cas.server.host}/login" />
    <b:bean id="casFilter"
        class="org.springframework.security.cas.web.CasAuthenticationFilter"
        p:authenticationManager-ref="authenticationManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage"
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <b:property name="authenticationDetailsSource">
            <b:bean class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource"/>
        </b:property>
        <b:property name="authenticationFailureHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/casfailed.jsp"/>
        </b:property>
    </b:bean>
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <b:bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>

    <b:bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="casAuthProviderKey">
        <b:property name="authenticationUserDetailsService">
            <b:bean class="eu.ueb.acem.services.auth.DatabaseUserDetailsService">
        		<b:property name="domainService" ref="domainService"/>
            </b:bean>
        </b:property>
        <b:property name="ticketValidator">
            <b:bean
                class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                p:acceptAnyProxy="true"
                p:proxyCallbackUrl="${cas.service.host}/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <b:constructor-arg value="${cas.server.host}" />
            </b:bean>
        </b:property>
        <b:property name="statelessTicketCache">
            <b:bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <b:property name="cache">
                    <b:bean class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <b:constructor-arg value="casTickets"/>
                        <b:constructor-arg value="50"/>
                        <b:constructor-arg value="true"/>
                        <b:constructor-arg value="false"/>
                        <b:constructor-arg value="3600"/>
                        <b:constructor-arg value="900"/>
                        <b:property name="cacheManager" ref="cacheManager"/>
                    </b:bean>
                </b:property>
            </b:bean>
        </b:property>
    </b:bean>

</b:beans>
